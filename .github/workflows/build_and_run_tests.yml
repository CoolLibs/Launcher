name: Build and run tests

on:
  push:
    branches: [main]
    paths-ignore:
      - "User data Default/**"
      - "**.md"
  pull_request:
    branches: [main]

env:
  cmake_configure_args: -D WARNINGS_AS_ERRORS_FOR_COOLLAB_LAUNCHER=ON
  cmakelists_folder: "."
  cmake_target: Tests-Coollab-Launcher

jobs:
  build-and-run-tests:
    name: ${{matrix.config.name}} ${{matrix.build_type}}
    runs-on: ${{matrix.config.os}}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
              name: Windows MSVC,
              os: windows-latest,
              cmake_configure_args: -D CMAKE_C_COMPILER=cl CMAKE_CXX_COMPILER=cl -G Ninja,
            }
          - {
              name: Windows Clang,
              os: windows-latest,
              cmake_configure_args: -T ClangCL,
            }
          - {
              name: Linux Clang,
              os: ubuntu-latest,
              cmake_configure_args: -D CMAKE_C_COMPILER=clang -D CMAKE_CXX_COMPILER=clang++ -G Ninja,
            }
          - {
              name: Linux GCC,
              os: ubuntu-latest,
              cmake_configure_args: -D CMAKE_C_COMPILER=gcc -D CMAKE_CXX_COMPILER=g++ -G Ninja,
            }
          - {
              name: MacOS Clang,
              os: macos-latest,
              cmake_configure_args: -D CMAKE_C_COMPILER=clang -D CMAKE_CXX_COMPILER=clang++ -G Ninja -D OPENSSL_ROOT_DIR=/usr/local/opt/openssl,
            }
        build_type:
          - Debug
          - Release

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Set up MSVC # NOTE: required to find cl.exe when using the Ninja generator. And we need to use Ninja in order for ccache to be able to cache stuff with MSVC.
        if: matrix.config.name == 'Windows MSVC'
        uses: ilammy/msvc-dev-cmd@v1.13.0

      - name: Cache vcpkg
        if: runner.os == 'Windows'
        uses: actions/cache@v4
        with:
          path: |
            ${{ runner.temp }}/vcpkg
          key: vcpkg-${{ runner.os }}-${{ hashFiles('**/vcpkg.json') }}
          restore-keys: vcpkg-${{ runner.os }}-

      - name: Cache vcpkg installed packages
        if: runner.os == 'Windows'
        uses: actions/cache@v4
        with:
          path: |
            ${{ runner.temp }}/vcpkg/installed
            ${{ runner.temp }}/vcpkg/buildtrees
          key: vcpkg-packages-${{ runner.os }}-${{ hashFiles('**/vcpkg.json') }}
          restore-keys: vcpkg-packages-${{ runner.os }}-

      - name: Install vcpkg
        if: runner.os == 'Windows'
        run: |
          if not exist "${{ runner.temp }}\vcpkg" (
            git clone https://github.com/microsoft/vcpkg.git ${{ runner.temp }}\vcpkg
            cd ${{ runner.temp }}\vcpkg
            .\bootstrap-vcpkg.bat
          )
        shell: cmd

      - name: Install Windows dependencies
        if: runner.os == 'Windows'
        run: |
          ${{ runner.temp }}\vcpkg\vcpkg.exe install openssl:x64-windows
        shell: cmd

      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev mesa-common-dev build-essential libgtk-3-dev
          sudo apt-get install -y libssl-dev
          sudo apt-get install -y libpulse-dev libasound2-dev
          sudo apt-get install -y libavcodec-dev libavdevice-dev libavfilter-dev libavformat-dev libavutil-dev libpostproc-dev libswresample-dev libswscale-dev

      - name: Install MacOS dependencies
        if: runner.os == 'MacOS'
        run: brew install ffmpeg

      - name: ccache
        uses: hendrikmuhs/ccache-action@main
        with:
          key: ${{matrix.config.name}}-${{matrix.build_type}}

      - name: Build
        uses: lukka/run-cmake@v3
        with:
          cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
          cmakeListsTxtPath: ${{github.workspace}}/${{env.cmakelists_folder}}/CMakeLists.txt
          cmakeAppendedArgs: ${{env.cmake_configure_args}} -D CMAKE_BUILD_TYPE=${{matrix.build_type}} ${{matrix.config.cmake_configure_args}} -D CMAKE_C_COMPILER_LAUNCHER=ccache -D CMAKE_CXX_COMPILER_LAUNCHER=ccache ${{runner.os == 'Windows' && '-D CMAKE_TOOLCHAIN_FILE=${{ runner.temp }}/vcpkg/scripts/buildsystems/vcpkg.cmake' || ''}}
          buildWithCMakeArgs: --config ${{matrix.build_type}} --target ${{env.cmake_target}}
          cmakeBuildType: ${{matrix.build_type}}
          buildDirectory: ${{github.workspace}}/build

      - name: Run
        run: ${{github.workspace}}/bin/tests/${{matrix.build_type}}/${{matrix.config.name == 'Windows Clang' && matrix.build_type || ''}}/${{env.cmake_target}}
